import numpy as np
import pandas as pd
import cv2
from google.colab.patches import cv2_imshow
from skimage import io
from PIL imoprt image
import matplotlib.pylab as plt

def get_pixel_value(img, row, col):
   
    rows, cols = img.shape
    if 0 <= row < rows and 0 <= col < cols:
        return img[row, col]
    else:
        return 0

def calculate_lbp_pixel(img, center_row, center_col):
   
    center_pixel = img[center_row, center_col]
    binary_values = []

    for i in range(center_row - 1, center_row + 2):
        for j in range(center_col - 1, center_col + 2):
            if i == center_row and j == center_col:
                continue
            pixel_value = get_pixel_value(img, i, j)
            binary_values.append(1 if pixel_value >= center_pixel else 0)

  
    lbp_value = sum(value * (2 ** idx) for idx, value in enumerate(binary_values[::-1]))
    return lbp_value

def compute_lbp_image(img):
 
    rows, cols = img.shape
    lbp_image = np.zeros((rows - 2, cols - 2), dtype=np.uint8)

    for i in range(1, rows - 1):
        for j in range(1, cols - 1):
            lbp_value = calculate_lbp_pixel(img, i, j)
            lbp_image[i - 1, j - 1] = lbp_value

    return lbp_image


input_image = cv2.imread('/content/CVASS1.PNG', cv2.IMREAD_GRAYSCALE)


if input_image is None:
    print("Error: Could not load the image.")
else:
   
    lbp_result = compute_lbp_image(input_image)

    cv2.imshow('Original Image', input_image)
    cv2.imshow('LBP Image', lbp_result)
    cv2.waitKey(0)
    cv2.destroyAllWindows()
